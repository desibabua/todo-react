{"version":3,"sources":["components/withDelete.js","components/InputBox.js","components/Title.js","components/Task.js","components/Tasks.js","components/reqApi.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["DeleteBtn","props","className","withDelete","Component","action","onClick","InputBox","useState","value","setValue","onSubmit","e","preventDefault","autoFocus","type","onChange","target","Title","isEditable","toggleIsEditable","title","state","Todo","task","status","id","Tasks","toDos","onDelete","map","toDo","TaskWithDelete","Task","key","fetchPost","url","data","fetch","method","headers","body","JSON","stringify","requestAPI","then","x","json","taskId","TodoList","toDoList","setToDoList","updateTodo","getAllToDos","useEffect","TitleWithDelete","resetToDos","updateTitle","updateStatus","deleteTask","addTask","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ee093793.chunk.js","sourcesContent":["import React from 'react';\n\nconst DeleteBtn = function (props) {\n  return (\n    <div className=\"deleteBtn\" {...props}>\n      X\n    </div>\n  );\n};\n\nconst withDelete = function (Component, action, className) {\n  return (props) => (\n    <div className={className}>\n      <Component {...props} />\n      <DeleteBtn onClick={action} />\n    </div>\n  );\n};\n\nexport default withDelete;\n","import React, { useState } from 'react';\n\nconst InputBox = function (props) {\n  const [value, setValue] = useState(props.value || '');\n\n  const handleChange = function (e) {\n    setValue(e.target.value);\n  };\n\n  const handleSubmit = function (e) {\n    e.preventDefault();\n    if (value) {\n      props.onSubmit(value);\n      setValue('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        autoFocus\n        type=\"text\"\n        onChange={handleChange}\n        value={value}\n        className={props.className}\n      />\n    </form>\n  );\n};\n\nexport default InputBox;\n","import React, { useState } from 'react';\nimport EditTitle from './InputBox';\n\nconst Title = function (props) {\n  let [isEditable, toggleIsEditable] = useState(false);\n\n  const saveTitle = function (title) {\n    props.onSubmit(title);\n    toggleIsEditable((state) => !state);\n  };\n\n  if (isEditable) {\n    return (\n      <EditTitle className=\"title\" value={props.title} onSubmit={saveTitle} />\n    );\n  }\n\n  return (\n    <div className=\"title\" onClick={() => toggleIsEditable((state) => !state)}>\n      {props.title}\n    </div>\n  );\n};\n\nexport default Title;\n","import React from 'react';\n\nconst Todo = function ({ task, status, id, onClick }) {\n  return (\n    <div id={id} className={'task ' + status}>\n      <div className=\"status\"></div>\n      <div className=\"content\" onClick={() => onClick(id)}>\n        {task}\n      </div>\n    </div>\n  );\n};\n\nexport default Todo;\n","import React from 'react';\nimport Task from './Task';\nimport withDelete from './withDelete';\n\nconst Tasks = function ({ toDos, onClick, onDelete }) {\n  return toDos.map((toDo) => {\n    const TaskWithDelete =  withDelete(Task, () => onDelete(toDo.id),'taskBar');\n    return <TaskWithDelete key={toDo.id} {...toDo} onClick={onClick}/>;\n  });\n};\n\nexport default Tasks;\n","const fetchPost = (url, data) => {\n  return fetch(url, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data),\n  });\n};\n\nlet requestAPI = {};\n\nrequestAPI.getAllToDos = () => fetch('/api/getAllToDos').then((x) => x.json());\nrequestAPI.resetToDos = () => fetch('/api/resetTodo').then((x) => x.json());\n\nrequestAPI.updateTitle = (title) => fetchPost('/api/updateTitle', { title });\nrequestAPI.addTask = (task) => fetchPost('/api/addTask', { task });\nrequestAPI.deleteTask = (taskId) => fetchPost('/api/deleteTask', { taskId });\nrequestAPI.updateStatus = (taskId) =>\n  fetchPost('/api/updateStatus', { taskId });\n\nexport default requestAPI;\n","import React, { useState, useEffect } from 'react';\nimport withDelete from './withDelete';\nimport Title from './Title';\nimport Tasks from './Tasks';\nimport AddTask from './InputBox';\nimport requestAPI from './reqApi';\n\nconst TodoList = function () {\n  const [toDoList, setToDoList] = useState(null);\n\n  const updateTodo = () => requestAPI.getAllToDos().then(setToDoList);\n\n  useEffect(() => {\n    updateTodo();\n  }, []);\n\n  const resetTodo = function () {\n    requestAPI.resetToDos().then(setToDoList);\n  };\n\n  const updateTitle = function (title) {\n    requestAPI.updateTitle(title).then(updateTodo);\n  };\n\n  const addTask = function (task) {\n    requestAPI.addTask(task).then(updateTodo);\n  };\n\n  const deleteTask = function (taskId) {\n    requestAPI.deleteTask(taskId).then(updateTodo);\n  };\n\n  const updateStatus = function (taskId) {\n    requestAPI.updateStatus(taskId).then(updateTodo);\n  };\n\n  const TitleWithDelete = withDelete(Title, () => resetTodo(), 'titleBar');\n\n  if (!toDoList) return <div>loading...</div>;\n\n  return (\n    <div>\n      <TitleWithDelete title={toDoList.title} onSubmit={updateTitle} />\n      <Tasks\n        toDos={toDoList.toDos}\n        onClick={updateStatus}\n        onDelete={deleteTask}\n      />\n      <AddTask onSubmit={addTask} />\n    </div>\n  );\n};\n\nexport default TodoList;\n","import React from 'react';\nimport TodoList from './components/TodoList';\nimport './App.css';\n\nconst App = function () {\n  return <TodoList />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}